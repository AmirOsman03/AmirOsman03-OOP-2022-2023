OPERATOR +=
Oglasnik &operator+= (Oglas oglas) {
    if (oglas.getPrice() < 0) {
        throw Exception();
    }

    Oglas *tmp = new Oglas [n+1];
    copy(this->oglasi, this->oglasi + n, tmp);
    tmp[n++] = oglas;
    oglasi = tmp;
    return *this;
}
.......................................................................
OPERATOR -=
MobileServis &operator-= (Device &device) {
int idx = -1;
for (int i = 0; i < n; ++i) {
    if (devices[i].getModel() == device.getModel()) {
        idx = i;
    }
}

if (idx != -1) {
    Device *tmp = new Device [n-1];
    copy(devices, devices + idx, tmp);
    copy(devices + idx + 1, devices + n, tmp + idx);
    delete [] devices;
    devices = tmp;
    n--;
    }
    return *this;
}
.......................................................................
OPERATOR -=
void remove(Student& s) {
    int counter = 0;

    Student* tmp = new Student[n - 1];

    for(int i = 0; i < n; i++) {
        if(students[i].daliIsti(s)) {
            tmp[counter++] = students[i];
        }
    }

    delete [] students;
    students = new Student[counter];
    for(int i = 0; i < counter; i++) {
        students[i] = tmp[i];
        n--;
    }
    delete [] tmp;
    return *this;
}
.......................................................................
SWAP
void swap(int *a, int *b) {
    int tmp = *a;
    *a = *b;
    *b = tmp;
}
.......................................................................
SORT (OPAGJACKI ILI RASTECKI)
void sort(int array[], int n) {
    for (int i = 0; i < n - 1; ++i) {
        for (int j = i + 1; j < n; ++j) {
            if (array[i] < array[j]) {
                swap(array[i], array[j]);
            }
        }
    }
}
.......................................................................
SORT 2 (OPAGJACKI ILI RASTECKI)
void sortSongs() {
   for (int i = 0; i < n - 1; ++i) {
      for (int j = 0; j < n - i - 1 ; ++j) {
         if (songs[j].getTime() < songs[j + 1].getTime()) {
            Song tmp = songs[j];
            songs[j] = songs[j + 1];
            songs[j + 1] = tmp;
         }
      }
   }
}

